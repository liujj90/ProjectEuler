
'''
Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
'''
def sumMult3and5(upperbound):
	value  = 0
	for i in range (1, upperbound):
		if i % 3 == 0 and i % 5 != 0:
			value += i
		elif (i % 5 == 0):
			value += i
	return value


'''
Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

def evenfibb(upperbound):
	fibb = [1,1]
	position = len(fibb) -1
	summed = 0
	value = 0
	while value < upperbound:
		value = fibb[position] + fibb[position - 1]
		fibb.append(value)
		position += 1
	for item in fibb:
		if item %2 ==0:
			summed += item
	return summed

'''
Problem 3
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
'''
def isprime(x):
	# make sure number is a positive integer
	x = abs(int(x))
	# cant be 0 or 1
	if x  < 2:
		return False
	# two is a prime
	elif x == 2:
		return True
	# even numbers other than two are not primes
	elif x %2 ==0:
		return False
	#check every odd number until sqrt of x as larger numbers will need to be multiplied by smaller number (already checked)  
	for i in range(3, int(x**0.5)+1, 2):
		if x % i  == 0:
			return False
	return True

def largestPrimefactor(x):
	factors = []
	# largest factor would be sqrt of number
	for i in range(1, int(x**.5)+1):
		if x % i == 0:
			factors.append(i)
	# number may be a prime too
	factors.append(x)
	primes  = []
	# check if prime, return largest (last)
	for factor in factors:
		if isprime(factor) == True:
			primes.append(factor)
	return primes[-1]

'''
Problem 4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
'''

def isPalindrome(x):
	#convert to string
	x = str(x)
	# if odd number of digits, false
	if len(x) %2 !=0:
		return False
	else:
		for n in range(len(x)/2):
			if x[n] != x[-(n+1)]:
				return False
		else:
			return True


for x in range(900,1000):
	for y in range(900,1000):
		if isPalindrome(x*y) == True:
			print ('%d * %d = %d - palindrome' %(x,y,x*y))

'''
Problem 5
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
'''
import time

def checkDivs(num, maximum):
	for i in range(maximum/2 ,maximum + 1):
		if num % i == 0:
			continue
		else:
			return False
	return True


def smallestMultiple(maximum):
	start = time.time()
	num = maximum
	while not checkDivs(num, maximum):
		num += maximum
	end = time.time()
	print (num, end - start)

'''
Problem 6
The sum of the squares of the first ten natural numbers is,

12 + 22 + ... + 102 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
'''
import numpy as np
#import time

def SumSquareDiff(maximum):
	start = time.time()
	x = np.array(range(1, maximum+1))
	sumofsq = sum(x**2)
	sqofsum = sum(x)**2
	end =  time.time()
	return (sqofsum - sumofsq, end - start)

'''
Problem 7
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
'''

# use isprime function from problem 3

# find 10001st prime
def findprime(target):
	primes = []
	x = 1
	while len(primes) < target:
		if isprime(x) == True:
			primes.append(x)
		x+=1
	#get last prime		
	return primes[-1]
